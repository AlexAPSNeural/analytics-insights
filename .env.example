Creating a template for environment variables is essential for managing configuration settings across different environments (e.g., development, testing, production) in a secure and organized way.

Here's a sample `.env.example` template for a typical web application:

```plaintext
# Database configuration
DB_HOST=your_database_host
DB_PORT=your_database_port
DB_USER=your_database_username
DB_PASSWORD=your_database_password
DB_NAME=your_database_name

# Server configuration
PORT=your_application_port

# JWT Secret
JWT_SECRET=your_jwt_secret_key

# API Keys
API_KEY=your_api_key
SECRET_API_KEY=your_secret_api_key

# OAuth Configuration
OAUTH_CLIENT_ID=your_oauth_client_id
OAUTH_CLIENT_SECRET=your_oauth_client_secret
OAUTH_REDIRECT_URL=your_oauth_redirect_url

# Email Service
EMAIL_HOST=your_email_host
EMAIL_PORT=your_email_port
EMAIL_USER=your_email_user
EMAIL_PASS=your_email_password

# Redis Configuration
REDIS_HOST=your_redis_host
REDIS_PORT=your_redis_port
REDIS_PASSWORD=your_redis_password

# Logging Configuration
LOG_LEVEL=info  # Possible values: error, warn, info, http, verbose, debug, silly

# Feature Toggles
FEATURE_X_ENABLED=false
FEATURE_Y_ENABLED=true

# Miscellaneous
NODE_ENV=development  # Possible values: development, production, test
APP_NAME=your_app_name
```

### Instructions:

1. **Copy the Template**: Save the above template in a file named `.env.example` in the root directory of your project. You should not use this file directly in production. It serves as a reference.

2. **Create Your Own `.env`**: Copy `.env.example` to a new file named `.env` in the same directory. Populate this file with actual values for your development or production environment needs.

3. **Secure Sensitive Data**: Never commit your `.env` file to version control. Instead, commit only `.env.example`, which does not contain sensitive data.

4. **Automate Loading Environment Variables**: Use packages like `dotenv` in Node.js, `python-dotenv` for Python, or similar options available for other programming languages to automatically load variables from the `.env` file into your application environment.

By following these practices, you ensure that your applicationâ€™s configuration is both secure and easy to manage across different environments.